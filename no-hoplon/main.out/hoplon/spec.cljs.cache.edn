{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name hoplon.spec, :imports nil, :requires {spec cljs.spec.alpha, cljs.spec.alpha cljs.spec.alpha}, :cljs.spec/speced-vars [], :uses nil, :defs {attr {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/hoplon-ckeditor5-test/1ni/-e6q9ll/main.out/hoplon/spec.cljs", :line 31, :column 7, :end-line 31, :end-column 11, :arglists (quote ([vspec]))}, :name hoplon.spec/attr, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/hoplon-ckeditor5-test/1ni/-e6q9ll/main.out/hoplon/spec.cljs", :end-column 11, :method-params ([vspec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 1, :fn-var true, :arglists (quote ([vspec]))}, do! {:name hoplon.spec/do!, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/hoplon-ckeditor5-test/1ni/-e6q9ll/main.out/hoplon/spec.cljs", :line 36, :column 1, :end-line 36, :end-column 14, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/hoplon-ckeditor5-test/1ni/-e6q9ll/main.out/hoplon/spec.cljs", :line 36, :column 11, :end-line 36, :end-column 14}, :tag cljs.core/MultiFn}, on! {:name hoplon.spec/on!, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/hoplon-ckeditor5-test/1ni/-e6q9ll/main.out/hoplon/spec.cljs", :line 44, :column 1, :end-line 44, :end-column 14, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/hoplon-ckeditor5-test/1ni/-e6q9ll/main.out/hoplon/spec.cljs", :line 44, :column 11, :end-line 44, :end-column 14}, :tag cljs.core/MultiFn}}, :cljs.spec/registry-ref [[:hoplon.spec/value (cljs.spec.alpha/or :string :hoplon.spec/string :boolean :hoplon.spec/boolean)] [:hoplon.spec/boolean cljs.core/boolean?] [:hoplon.spec/on! (cljs.spec.alpha/multi-spec hoplon.spec/on! :hoplon.spec/on!)] [:hoplon.spec/string cljs.core/string?] [:hoplon.spec/elem cljs.core/any?] [:hoplon.spec/do! (cljs.spec.alpha/multi-spec hoplon.spec/do! :hoplon.spec/do!)] [:hoplon.spec/attr cljs.core/keyword?] [:hoplon.spec/class (cljs.spec.alpha/or :map cljs.core/map? :string cljs.core/string? :collection (cljs.spec.alpha/coll-of (cljs.spec.alpha/or :keyword cljs.core/keyword? :string cljs.core/string?)))] [:hoplon.spec/map cljs.core/map?]], :require-macros {spec cljs.spec.alpha, cljs.spec.alpha cljs.spec.alpha}, :cljs.analyzer/constants {:seen #{do! cljs.core/boolean? :attribute hoplon.spec :hoplon.spec/value cljs.core/keyword? :hoplon.spec/boolean :element cljs.spec.alpha/coll-of :cljs.spec.alpha/kind-form :default :ns on! :name cljs.core/string? cljs.spec.alpha/or :value :hoplon.spec/on! :file :end-column :hoplon.spec/string string? cljs.core/map? keyword? :cljs.spec.alpha/cpred :string :column hoplon.spec/on! :line :keyword :hoplon.spec/elem :end-line :hoplon.spec/do! :hoplon.spec/attr :hoplon.spec/class cljs.spec.alpha/multi-spec :arglists :hierarchy :doc :collection :hoplon.spec/map :boolean spec/or :map :cljs.spec.alpha/conform-all :test cljs.core/any? :hoplon.spec/default :cljs.spec.alpha/describe vspec hoplon.spec/do!}, :order [:hoplon.spec/boolean cljs.core/boolean? :hoplon.spec/string cljs.core/string? :hoplon.spec/map cljs.core/map? :hoplon.spec/elem cljs.core/any? :hoplon.spec/attr cljs.core/keyword? :hoplon.spec/class cljs.spec.alpha/or :map :string :collection cljs.spec.alpha/coll-of :keyword spec/or keyword? string? :cljs.spec.alpha/kind-form :cljs.spec.alpha/cpred :cljs.spec.alpha/conform-all :cljs.spec.alpha/describe :hoplon.spec/value :boolean :element :attribute :value vspec :default :hoplon.spec/default :hierarchy :hoplon.spec/do! cljs.spec.alpha/multi-spec hoplon.spec/do! :ns :name :file :end-column :column :line :end-line :arglists :doc :test hoplon.spec do! :hoplon.spec/on! hoplon.spec/on! on!]}, :doc nil}